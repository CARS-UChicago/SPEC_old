############################################################################
# User macro file
# Use this to replace standard macros from /usr/lib/spec.d/standard.mac 
#  or add new macor which will be used for any spec version
# Note this file is read each time spec is started (either psic or kappa)
# Note before defining a new macro type lsdef in spec to see
# if the name is already defined
#
############################################################################
# set up for trajectory scanning
qdofile("/home/specadm/user_macros/traj_scans.mac")
############################################################################


############################################################################
## expanded this macro so it shows name and mne (vs _mot in standard.mac)
#
# show current (geometry) motor postions, only user units
def _mot '{
	local s[]
	s[0] = "name"
      s[1] = "mne"
	s[2] = "user"
	show_motor_info(s, 3, $#==1? $1:MOTORS)
}'
############################################################################


############################################################################
#### changed below macro from standard.mac to display 9 motors per line  
#### and add a newline between them
#
# Internal macro used to display motor information at 8 motors per line.
# Listing of motors named "unused" or that are disabled is suppressed.
# First argument is array of info-types as "name", "mne", "user",
# "dial", "lim+", "lim-", "ulim+" and "ulim-".  Second argument
# is number of elements in array.  Third argument is number of motors.
# If first argument is a single string as above, that is okay.
def show_motor_info(f, ns, n) '{
    local i, j, k, m, s[], t
    for (i=0; i<n && i<MOTORS; i++) {
	for (k=0;k<ns;k++)
	    s[k]=""
	for (j=0; i<n && i<MOTORS; i++) {
	    if (!is_using_motor(mA[i]))
		continue;
	    for (k=0;k<ns;k++) {
		m = mA[i]
		t = (whatis("f")&0x01000000)? f[k]:f
		if (t =="name")
		    s[k] = s[k] sprintf("%9.9s", motor_name(m))
		else if (t == "mne")
		    s[k] = s[k] sprintf("%9.9s", motor_mne(m))
		else if (t == "user")
		    s[k] = s[k] sprintf("%9.4f", A[m])
		else if (t == "dial")
		    s[k] = s[k] sprintf("%9.4f", dial(m, A[m]))
		else if (t == "lim+")
		    s[k] = s[k] sprintf("%9.4f", get_lim(m, +1))
		else if (t == "ulim+")
		    s[k] = s[k] sprintf("%9.4f", user(m, get_lim(m, +1)))
		else if (t == "lim-")
		    s[k] = s[k] sprintf("%9.4f", get_lim(m, -1))
		else if (t == "ulim-")
		    s[k] = s[k] sprintf("%9.4f", user(m, get_lim(m, -1)))
	    }
	    if (j%9 == 8)
		break
	    for (k=0;k<ns;k++)
		s[k] = s[k] " "
	    j++
	}
	#for (k=0;k<ns;k++)
	#    p s[k] 
      for (k=0;k<ns;k++){
	    p s[k]
      }
      p "\n" 
    }
}'
############################################################################

############################################################################
## user_getcounts
## user_getcounts is called in the macro get_counts 
## defined in standard.mac, its used here to add an 
## epics pv to the scalers
def user_getcounts '

## put aim_adc1 roi into the last scaler
# need this to wait for mca software to finish the calc
#sleep(.3)  
#S[5] = epics_get("13IDC:aim_adc1.R0")
#S[5] = epics_get("13IDC:aim_adc1.R0N")
S[5] = 0

'
###########################################################################

############################################################################
## user_precount
## executed before a count in standard.mac
## use to make sure the mono feedback is locked
## bf counting
def user_precount '

if ( epics_get("13IDA:mono_pid1.FBON") ==  "On" ){
   if (epics_get("13IDA:mono_pid1Locked") == 0) printf("Waiting for beam\n")
   while (epics_get("13IDA:mono_pid1Locked") == 0) sleep(0.1)
}

'
############################################################################

############################################################################
## CEN
## the macro def in standard.mac is wrong ??
# def CEN  'pl_COM'     # folks are used to this name
############################################################################

############################################################################
## this is executed after any motor move 
def user_postmove ' 
# while (epics_get("13IDA:E:Moving") == "Busy") sleep(0.1)
while (epics_get("13IDA:E:Moving") == 1) sleep(0.1)
'
############################################################################
